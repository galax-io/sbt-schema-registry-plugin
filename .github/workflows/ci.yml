name: Continuous Integration

on:
  pull_request:
    branches: ['**']
  push:
    branches: ['**']
    tags: ['v*']

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  packages: write

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SBT_OPTS: -Dsbt.color=false -Dsbt.log.noformat=true -Xms2G -Xmx2G -Xss4M -XX:+UseG1GC
  JVM_OPTS: -Xms2G -Xmx2G -Xss4M -XX:+UseG1GC

jobs:
  test:
    name: Lint, Compile & Test
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java (Temurin 17) with sbt cache
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: sbt

      - name: Cache Coursier
        uses: coursier/cache-action@v6

      - name: Cache Ivy/SBT
        uses: actions/cache@v4
        with:
          path: |
            ~/.ivy2/cache
            ~/.sbt
            ~/.cache/coursier
          key: sbt-${{ runner.os }}-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('project/**') }}
          restore-keys: sbt-${{ runner.os }}-

      - name: Check Formatting
        run: |
          sbt -no-colors -v scalafmtCheckAll scalafmtSbtCheck

      - name: Compile
        run: sbt -no-colors -v clean compile

      - name: Test
        run: sbt -no-colors -v test

  release:
    name: Release (tag-driven)
    needs: [test]
    runs-on: ubuntu-24.04
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java (Temurin 17) with sbt cache
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: sbt

      - name: Cache Coursier
        uses: coursier/cache-action@v6

      - name: Cache Ivy/SBT
        uses: actions/cache@v4
        with:
          path: |
            ~/.ivy2/cache
            ~/.sbt
            ~/.cache/coursier
          key: sbt-${{ runner.os }}-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('project/**') }}
          restore-keys: sbt-${{ runner.os }}-

      - name: Compute next version & create tag on main
        id: bump
        if: github.ref == 'refs/heads/main'
        shell: bash
        run: |
          set -euo pipefail
          LAST_TAG=$(git describe --tags --abbrev=0 --match "v*" 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-<none>}"
          RANGE="${LAST_TAG}..HEAD"
          if [ -z "$LAST_TAG" ]; then
            RANGE=""
          fi

          BUMP="patch"
          COMMITS=$(git log --pretty=format:%s ${RANGE})
          if echo "$COMMITS" | grep -Eiq 'BREAKING CHANGE|!:'; then
            BUMP="major"
          elif echo "$COMMITS" | grep -Eiq '^feat(\(.+\))?:'; then
            BUMP="minor"
          fi
          echo "bump=$BUMP" >> "$GITHUB_OUTPUT"

          if [ -z "$LAST_TAG" ]; then
            MAJOR=0; MINOR=0; PATCH=0
          else
            ver="${LAST_TAG#v}"
            IFS='.' read -r MAJOR MINOR PATCH <<< "$ver"
          fi

          case "$BUMP" in
            major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR+1)); PATCH=0 ;;
            patch) PATCH=$((PATCH+1)) ;;
          esac

          NEXT_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          echo "Next tag: $NEXT_TAG"
          echo "tag=$NEXT_TAG" >> "$GITHUB_OUTPUT"

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag -a "$NEXT_TAG" -m "Release $NEXT_TAG"
          git push origin "$NEXT_TAG"

      - name: Publish to Sonatype via sbt-ci-release
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
        run: |
          set -euo pipefail
          TAG="${GITHUB_REF##*/}"      # vX.Y.Z
          VERSION="${TAG#v}"           # X.Y.Z
          echo "Publishing version $VERSION from tag $TAG"

          if [ -n "${PGP_SECRET:-}" ]; then
            echo "$PGP_SECRET" | base64 --decode | gpg --batch --import
          fi

          if sbt 'show dynver' >/dev/null 2>&1; then
            sbt -no-colors -v ci-release
          else
            sbt -no-colors -v "set ThisBuild/version := \"${VERSION}\"" ci-release
          fi

      - name: Generate Changelog
        id: changelog
        if: startsWith(github.ref, 'refs/tags/v')
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          mode: "COMMIT"
          configurationJson: |
            {
              "template": "# Changelog\n\n{{CHANGELOG}}",
              "categories": [
                {"title": "‚ú® Features", "labels": ["feat", "feature"]},
                {"title": "üêõ Bug Fixes", "labels": ["fix", "bug"]},
                {"title": "üìù Documentation", "labels": ["docs"]},
                {"title": "‚ö° Performance Improvements", "labels": ["perf"]},
                {"title": "‚ôªÔ∏è Refactoring", "labels": ["refactor"]},
                {"title": "üß™ Tests", "labels": ["test"]},
                {"title": "üßπ Chores", "labels": ["chore"]},
                {"title": "üì¶ Dependencies", "labels": ["dependency"]},
                {"title": "üö® Breaking Changes", "labels": ["breaking"]},
                {"title": "ü§ñ CI / Build", "labels": ["ci"]}
              ],
              "label_extractor": [
                {
                  "pattern": "^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test){1}(\\([\\w\\-\\.]+\\))?(!)?: ([\\w ])+([\\s\\S]*)",
                  "on_property": "title",
                  "target": "$1"
                }
              ]
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.changelog.outputs.changelog }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
